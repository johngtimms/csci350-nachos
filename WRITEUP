Title: Writeup for Assignment 2, Fall 2015
Date:  10/19/15
Group: Name					Email
	   Nicholas Roubal		nroubal@usc.edu
	   Yetsebaot Sisay		sisay@usc.edu
	   John Timms			timms@usc.edu

I. Requirements:

	Part 1:

		Part 1 requires implementing system calls and exception handling (the ability for Nachos to
		'take over' in kernel mode in case a user program makes a system call or experiences an error).

	Part 2:

		Part 2 requires implementing multiprogramming (the ability for multiple Nachos user programs
		to run at once).

	Part 3:

		Part 3 requires re-implementing the Passport Office (from Assignment 1) as a set of multithreaded
		Nachos user programs. This will require using the Lock and Condition system calls from Part 1.

II. Assumptions:

	Part 1:

	Part 2:

	Part 3:

III. Design:

	Part 1:

	Part 2:

	Part 3:

IV. Implementation:

	Files Modified:
		machine/machine.h
		machine/translate.cc (TODO CHANGE THIS BACK BEFORE SUBMITTING)
		test/Makefile
		test/start.s
		test/testfiles.c
		threads/main.cc (TODO verify only changes are cosmetic before submitting)
		threads/synch.cc (TODO can we change this back to Peppy's code w/out issue?)
		threads/synch.h (TODO can we change this back to Peppy's code w/out issue?)
		threads/system.cc (TODO are we allowed to change this?)
		threads/system.h (TODO are we allowed to change this?)
		threads/thread.cc (TODO revert cosmetic changes back?)
		threads/thread.h (TODO are we allowed to change this?)
		userprog/addrspace.cc
		userprog/addrspace.h
		userprog/bitmap.cc (TODO can this be reverted back?)
		userprog/bitmap.h (TODO can this be reverted back?)
		userprog/exception.cc
		userprog/progtest.cc
		userprog/synchconsole.cc (TODO can this be reverted back?)
		userprog/synchconsole.h (TODO can this be reverted back?)
		userprog/syscall.h
		userprog/table.h (TODO can this be reverted back?)
		vm/Makefile (TODO verify only changes are automatic before submitting)

	Files Added:
		test/passportOffice.c
		test/tester.c (TODO CHANGE THIS)
		test/tester2.c (TODO CHANGE THIS)
		test/testexec.c (TODO CHANGE THIS)
		threads/Makefile (TODO verify only changes are automatic before submitting)
		threads/structs.h
		userprog/Makefile (TODO verify only changes are automatic before submitting)
		userprog/process.h
















	Data Structures Added:
		class Customer 				in threads/threadtest.cc
		class Clerk 				in threads/threadtest.cc
		class Manager 				in threads/threadtest.cc

	Data Structures Modified:
		class Lock 					in threads/synch.h
		class Condition 			in threads/synch.h

	Functions Added:
		Customer::Customer()		in threads/threadtest.cc
		Customer::doApplication()	in threads/threadtest.cc
		Customer::doPicture()		in threads/threadtest.cc
		Customer::doPassport()		in threads/threadtest.cc
		Customer::doCashier()		in threads/threadtest.cc
		Customer::waitInLine()		in threads/threadtest.cc
		Customer::chooseLine()		in threads/threadtest.cc
		Customer::enterLine()		in threads/threadtest.cc
		Clerk::Clerk()				in threads/threadtest.cc
		Manager::Manager()			in threads/threadtest.cc
		Manager::managerMain()		in threads/threadtest.cc
		runCustomer()				in threads/threadtest.cc
		runSenator()				in threads/threadtest.cc
		runApplicationClerk()		in threads/threadtest.cc
		runPictureClerk()			in threads/threadtest.cc
		runPassportClerk()			in threads/threadtest.cc
		runCashier()				in threads/threadtest.cc
		runManager()				in threads/threadtest.cc
		PassportOffice()			in threads/threadtest.cc
		Problem2()					in threads/threadtest.cc
		printMenu()					in threads/threadtest.cc
		Test1()						in threads/threadtest.cc
		Test2()						in threads/threadtest.cc
		Test3()						in threads/threadtest.cc
		Test4()						in threads/threadtest.cc
		Test5()						in threads/threadtest.cc
		Test6()						in threads/threadtest.cc
		Test7()						in threads/threadtest.cc
		TestSuite()					in threads/threadtest.cc
		printTestMenu()				in threads/threadtest.cc
		printTest7Menu()			in threads/threadtest.cc

	Functions Modified:
		main()						in threads/main.cc
		Lock::Lock()				in threads/synch.cc
		Lock::~Lock()				in threads/synch.cc
		Lock::Acquire()				in threads/synch.cc
		Lock::Release()				in threads/synch.cc
		Condition::Condition()		in threads/synch.cc
		Condition::~Condition()		in threads/synch.cc
		Condition::Wait()			in threads/synch.cc
		Condition::Signal()			in threads/synch.cc
		Condition::Broadcast()		in threads/synch.cc
		SimpleThread()				in threads/threadtest.cc (removed)
		ThreadTest()				in threads/threadtest.cc (removed)

V. Testing:

	How To Test:

		Part 1:

			Run threads/nachos with -T to execute the professor-provided test suite.

		Part 2:

			(none)

	Test Output:

		Part 1:

			Please compare the test output with the professor's expected output.

		Part 2:

			Test 1:

				Customers are sent in to the office with a restricted number of clerks at one 
				station. You will see that customers alternate evenly between clerks.

			Test 2:

				You will see the manager report each figure sequentially. The manager code in 
				runManager() checks with each clerk and acquires the clerk's lock before getting 
				their individual money amount, then releases the lock.

			Test 3:

				You will see customers go to the cashier, transact, and then wait to leave. The 
				cashier will then begin serving another customer.

			Test 4:

				You will see clerks going on break because they have no customers to serve.

			Test 5:

				You will see managers put clerks back on duty after customers get in line.

			Test 6:

				You will see multiple customers update the Clerk's total money and the Manager will print them out.

			Test 7:

				Test 7 has two parts. The first the Senator enters the Passport Office without any customers inside.
				The second the Senator enters the Passport Office with customers inside.

VI: Discussion:

	The locks and conditions were expected to behave according to conventional expectations, and the
	passport office was expected to function rationally without data corruption or endless loops.

	The majority of the work on this project was implementing the Part 2 requirements and the 
	customer's flow through the passport office. By using locks for every type of data change that
	took place, we avoided data corruption. Condition variables were used to allow customers to
	queue, and Broadcast() was particularly useful for handling when senators arrived and left and
	customers needed to change from "inside" to "outside" and back.

VII. Miscellaneous:

	(none)
